import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.nio.charset.StandardCharsets
import java.security.GeneralSecurityException
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException

plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

android {
    signingConfigs {
        try {
            ahmad {
                storeFile file("D:\\hack_pubg_res\\keys\\shanap3.jks")
                storePassword "grE@aFyoLqY0GXxe*@OK&1&fpD%^IY"
                keyPassword "grE@aFyoLqY0GXxe*@OK&1&fpD%^IY"
                v1SigningEnabled true
                v2SigningEnabled true
                keyAlias 'c5BMMRVBA716E6$X1LNt8Uk%bZqGHrtV$Y!ofm3Y'
            }
        } catch (ex) {
            throw new InvalidUserDataException(ex.toString())
        }
    }
    namespace 'com.big0soft.animequotes'
    compileSdk 34

    defaultConfig {
        applicationId "com.big0soft.animequotes"
        minSdk 28
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def properties = new Properties()
        var encrypt = new UrlAesEncryption2("VGG1KP0BRXaJz54")
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        buildConfigField("String", "AA1", "\"${encrypt.encode(properties.getProperty('AA1'))}\"")
        buildConfigField("String", "AA2", "\"${encrypt.encode(properties.getProperty('AA2'))}\"")
        buildConfigField("String", "AA3", "\"${properties.getProperty('AA3')}\"")
        buildConfigField("String", "AA4", "\"${properties.getProperty('AA4')}\"")
        buildConfigField("Integer", "AA5", "${properties.getProperty('AA5')}")
        buildConfigField("String", "AA6", "\"${properties.getProperty('AA6')}\"")
        buildConfigField("String", "AA7", "\"${properties.getProperty('AA7')}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def project = rootProject.name
                def SEP = "-"
//                def flavor = variant.productFlavors[0].name
//                def buildType = variant.variantData.variantConfiguration.buildType.name
                def version = versionName
//                def date = new Date();
//                def formattedDate = date.format('ddMMyy_HHmm')
                def newApkName = project + SEP + version + ".apk"
                outputFileName = new File(newApkName)
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_9
        targetCompatibility JavaVersion.VERSION_1_9
    }

    buildFeatures{
        dataBinding true
        buildConfig true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.firebase:firebase-database:20.3.0'
    implementation 'com.google.firebase:firebase-storage:20.3.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    //    fragment navigation component
    var navigationVersion = "2.7.5"
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"

    // animation
    var lottieVersion = "6.1.0"
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // layout fix size
    var intuitVersion = "1.1.0"
    implementation "com.intuit.sdp:sdp-android:$intuitVersion"
    implementation "com.intuit.ssp:ssp-android:$intuitVersion"

    // http request
    var retrofitVersion = "2.9.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    // ok http
    var httpVersion = "4.9.3"
    implementation "com.squareup.okhttp3:okhttp:$httpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$httpVersion"

    // circle image
    implementation 'de.hdodenhof:circleimageview:3.1.0'
//    rounded image
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation 'com.squareup.picasso:picasso:2.71828'

    // big0soft library
    implementation project(path: ':resource')
//    implementation project(path: ':annotation')
//    implementation project(path: ':annotationprocessor')
}

interface CustomKeyEncoder {

    String decode(String encodedKey);

    String decode(String password, String encodedKey);

    String encode(CharSequence rawKey);

    String encode(String password, CharSequence rawKey);

    boolean matches(CharSequence rawKey, String encodedKey);

    boolean matches(String password, CharSequence rawKey, String encodedKey);
}

class UrlAesEncryption2 implements CustomKeyEncoder {
    private final String password;

    UrlAesEncryption2(String password) {
        this.password = password;
    }


    @Override
    String decode(String encodedKey) {
        return decode(password, encodedKey);
    }

    @Override
    String decode(String password, String encodedKey) {
        try {
            return AESCrypt3.decrypt(password, encodedKey);
        } catch (GeneralSecurityException e) {
            return "error: " + e.getMessage();
        }
    }

    @Override
    String encode(CharSequence rawKey) {
        return encode(password, rawKey);
    }

    @Override
    String encode(String password, CharSequence rawKey) {
        try {
            return AESCrypt3.encrypt(password, rawKey.toString());
        } catch (GeneralSecurityException e) {
            return "error: " + e.getMessage();
        }
    }

    @Override
    boolean matches(CharSequence rawKey, String encodedKey) {
        return matches(password, rawKey, encodedKey);
    }

    @Override
    boolean matches(String password, CharSequence rawKey, String encodedKey) {
        try {
            return AESCrypt3.decrypt(password, encodedKey).equals(rawKey.toString());
        } catch (GeneralSecurityException e) {
            System.out.println("error: " + e.getMessage());
            return false;
        }
    }

}

final class AESCrypt3 {

    private static final String TAG = "AESCrypt";

    //AESCrypt-ObjC uses CBC and PKCS7Padding
    private static final String AES_MODE = "AES/CBC/PKCS7Padding";
    private static final String AES_MODE2 = "AES/CBC/PKCS5Padding";

    private static final String CHARSET = "UTF-8";

    //AESCrypt-ObjC uses SHA-256 (and so a 256-bit key)
    private static final String HASH_ALGORITHM = "SHA-256";

    //AESCrypt-ObjC uses blank IV (not the best security, but the aim here is compatibility)
    private static final byte[] ivBytes = new char[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    //togglable log option (please turn off in live!)
    static boolean DEBUG_LOG_ENABLED = false;


    /**
     * Generates SHA256 hash of the password which is used as key
     *
     * @param password used to generated key
     * @return SHA256 of the password
     */
    private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
        byte[] bytes = password.getBytes(StandardCharsets.UTF_8);
        digest.update(bytes, 0, bytes.length);
        byte[] key = digest.digest();

        log("SHA-256 key ", key);

        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
        return secretKeySpec;
    }


    /**
     * Encrypt and encode message using 256-bit AES with key generated from password.
     *
     * @param password used to generated key
     * @param message  the thing you want to encrypt assumed String UTF-8
     * @return Base64 encoded CipherText
     * @throws GeneralSecurityException if problems occur during encryption
     */
    static String encrypt(final String password, String message)
            throws GeneralSecurityException {

        try {
            final SecretKeySpec key = generateKey(password);

            log("message", message);

            byte[] cipherText = encrypt(key, ivBytes, message.getBytes(CHARSET));

            //NO_WRAP is important as was getting \n at the end
            String encoded = Base64.getEncoder().encodeToString(cipherText);
            log("Base64.NO_WRAP", encoded);
            return encoded;
        } catch (UnsupportedEncodingException e) {
            throw new GeneralSecurityException(e);
        }
    }


    /**
     * More flexible AES encrypt that doesn't encode
     *
     * @param key     AES key typically 128, 192 or 256 bit
     * @param iv      Initiation Vector
     * @param message in bytes (assumed it's already been decoded)
     * @return Encrypted cipher text (not encoded)
     * @throws GeneralSecurityException if something goes wrong during encryption
     */
    static byte[] encrypt(final SecretKeySpec key, final byte[] iv, final byte[] message)
            throws GeneralSecurityException {
        final Cipher cipher = Cipher.getInstance(AES_MODE2);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);
        byte[] cipherText = cipher.doFinal(message);

        log("cipherText", cipherText);

        return cipherText;
    }


    /**
     * Decrypt and decode ciphertext using 256-bit AES with key generated from password
     *
     * @param password                used to generated key
     * @param base64EncodedCipherText the encrpyted message encoded with base64
     * @return message in Plain text (String UTF-8)
     * @throws GeneralSecurityException if there's an issue decrypting
     */
    static String decrypt(final String password, String base64EncodedCipherText)
            throws GeneralSecurityException {

        try {
            final SecretKeySpec key = generateKey(password);

            log("base64EncodedCipherText", base64EncodedCipherText);
            byte[] decodedCipherText = Base64.getDecoder().decode(base64EncodedCipherText);
            log("decodedCipherText", decodedCipherText);

            byte[] decryptedBytes = decrypt(key, ivBytes, decodedCipherText);

            log("decryptedBytes", decryptedBytes);
            String message = new String(decryptedBytes, CHARSET);
            log("message", message);


            return message;
        } catch (UnsupportedEncodingException e) {
            throw new GeneralSecurityException(e);
        }
    }


    /**
     * More flexible AES decrypt that doesn't encode
     *
     * @param key               AES key typically 128, 192 or 256 bit
     * @param iv                Initiation Vector
     * @param decodedCipherText in bytes (assumed it's already been decoded)
     * @return Decrypted message cipher text (not encoded)
     * @throws GeneralSecurityException if something goes wrong during encryption
     */
    static byte[] decrypt(final SecretKeySpec key, final byte[] iv, final byte[] decodedCipherText)
            throws GeneralSecurityException {
        final Cipher cipher = Cipher.getInstance(AES_MODE2);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);
        byte[] decryptedBytes = cipher.doFinal(decodedCipherText);

        log("decryptedBytes", decryptedBytes);

        return decryptedBytes;
    }


    private static void log(String what, byte[] bytes) {
    }

    private static void log(String what, String value) {
    }


    /**
     * Converts byte array to hexidecimal useful for logging and fault finding
     *
     * @param bytes
     * @return
     */
    private static String bytesToHex(byte[] bytes) {

        final var hexArray = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8',
                '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] hexChars = new char[bytes.length * 2];
        int v;
        for (int j = 0; j < bytes.length; j++) {
            v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }

    private AESCrypt3() {
    }

}

